name: 🚀 Build and Release Multi-Arch Binaries

on:
  release:
    types: [created]

jobs:
  build-binaries:
    name: Build ${{ matrix.os }}-${{ matrix.arch }} binary
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: x64
            runner: ubuntu-latest
            binary_name: gitautoflow-linux-x64
            python_arch: x64
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            binary_name: gitautoflow-linux-arm64
            python_arch: arm64

          # macOS builds
          - os: macos
            arch: x64
            runner: macos-13  # Intel Mac
            binary_name: gitautoflow-macos-x64
            python_arch: x64
          - os: macos
            arch: arm64
            runner: macos-14  # M1/M2 Mac
            binary_name: gitautoflow-macos-arm64
            python_arch: arm64

          # Windows builds
          - os: windows
            arch: x64
            runner: windows-latest
            binary_name: gitautoflow-windows-x64.exe
            python_arch: x64

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.python_arch }}

      - name: 📦 Install UV (Linux/macOS)
        if: matrix.os != 'windows'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: 📦 Install UV (Windows)
        if: matrix.os == 'windows'
        run: powershell -c "irm https://astral.sh/uv/install.ps1 | iex"

      - name: 📋 Add UV to PATH (Windows)
        if: matrix.os == 'windows'
        run: echo "$HOME\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 🔧 Install dependencies
        run: |
          uv sync
          uv add nuitka
          uv add ordered-set  # Required for Nuitka

      - name: 🏗️ Build binary with Nuitka (Linux/macOS)
        if: matrix.os != 'windows'
        run: |
          uv run python -m nuitka \
            --onefile \
            --assume-yes-for-downloads \
            --enable-plugin=anti-bloat \
            --show-progress \
            --show-memory \
            --output-filename=${{ matrix.binary_name }} \
            --output-dir=dist/ \
            src/gitautoflow/cli/main.py

      - name: 🏗️ Build binary with Nuitka (Windows)
        if: matrix.os == 'windows'
        run: |
          uv run python -m nuitka --onefile --assume-yes-for-downloads --enable-plugin=anti-bloat --show-progress --show-memory --output-filename=${{ matrix.binary_name }} --output-dir=dist/ src/gitautoflow/cli/main.py

      - name: ✅ Test binary (Linux/macOS)
        if: matrix.os != 'windows'
        run: |
          chmod +x dist/${{ matrix.binary_name }}
          ./dist/${{ matrix.binary_name }} --help

      - name: ✅ Test binary (Windows)
        if: matrix.os == 'windows'
        run: |
          dist/${{ matrix.binary_name }} --help

      - name: 📊 Show binary info
        run: |
          ls -la dist/
          file dist/${{ matrix.binary_name }} || true

      - name: 📤 Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/${{ matrix.binary_name }}
          asset_name: ${{ matrix.binary_name }}
          asset_content_type: application/octet-stream

  create-checksums:
    name: 📋 Generate checksums
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v3

      - name: 📋 Generate SHA256 checksums
        run: |
          echo "# SHA256 Checksums" > checksums.txt
          echo "Generated on: $(date)" >> checksums.txt
          echo "" >> checksums.txt
          for file in gitautoflow-*; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
            fi
          done || true
          cat checksums.txt

      - name: 📤 Upload checksums to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain