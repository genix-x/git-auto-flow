name: 🧪 Test Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-nuitka-build:
    name: Test Nuitka build on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            runner: ubuntu-latest
            binary_name: gitautoflow-test-linux
          - os: macos
            runner: macos-latest
            binary_name: gitautoflow-test-macos
          - os: windows
            runner: windows-latest
            binary_name: gitautoflow-test-windows.exe

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔧 Install patchelf (Linux)
        if: matrix.os == 'linux'
        run: sudo apt-get update && sudo apt-get install -y patchelf

      - name: 📦 Install UV (Linux/macOS)
        if: matrix.os != 'windows'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: 📦 Install UV (Windows)
        if: matrix.os == 'windows'
        run: powershell -c "irm https://astral.sh/uv/install.ps1 | iex"

      - name: 📋 Add UV to PATH (Windows)
        if: matrix.os == 'windows'
        run: echo "$HOME\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 🔧 Install dependencies
        run: |
          uv sync
          uv add nuitka
          uv add ordered-set

      - name: 📝 Create launcher file
        run: |
          cat > launcher.py << 'EOF'
          #!/usr/bin/env python3
          import sys
          import os
          sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))
          from gitautoflow.cli.main import main
          if __name__ == "__main__":
              main()
          EOF

      - name: 🏗️ Test build with Nuitka (Linux/macOS)
        if: matrix.os != 'windows'
        run: |
          uv run python -m nuitka \
            --onefile \
            --assume-yes-for-downloads \
            --enable-plugin=anti-bloat \
            --output-filename=${{ matrix.binary_name }} \
            --output-dir=dist/ \
            --include-package-data=gitautoflow \
            launcher.py

      - name: 📝 Create launcher file (Windows)
        if: matrix.os == 'windows'
        run: |
          echo '#!/usr/bin/env python3' > launcher.py
          echo 'import sys' >> launcher.py
          echo 'import os' >> launcher.py
          echo 'sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))' >> launcher.py
          echo 'from gitautoflow.cli.main import main' >> launcher.py
          echo 'if __name__ == "__main__":' >> launcher.py
          echo '    main()' >> launcher.py

      - name: 🏗️ Test build with Nuitka (Windows)
        if: matrix.os == 'windows'
        run: |
          uv run python -m nuitka --onefile --assume-yes-for-downloads --enable-plugin=anti-bloat --output-filename=${{ matrix.binary_name }} --output-dir=dist/ --include-package-data=gitautoflow launcher.py

      - name: ✅ Test binary (Linux/macOS)
        if: matrix.os != 'windows'
        run: |
          chmod +x dist/${{ matrix.binary_name }}
          ./dist/${{ matrix.binary_name }} --help
          ./dist/${{ matrix.binary_name }} version

      - name: ✅ Test binary (Windows)
        if: matrix.os == 'windows'
        run: |
          dist/${{ matrix.binary_name }} --help
          dist/${{ matrix.binary_name }} version

      - name: 📊 Show binary info
        run: |
          ls -la dist/
          file dist/${{ matrix.binary_name }} || true

      - name: 📤 Upload test binary (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: test-binary-${{ matrix.os }}
          path: dist/${{ matrix.binary_name }}
          retention-days: 1