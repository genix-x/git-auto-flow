name: 🚀 Build and Release Multi-Arch Binaries

on:
  release:
    types: [created]

jobs:
  build-binaries:
    name: Build ${{ matrix.os }}-${{ matrix.arch }} binary
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: x64
            runner: ubuntu-latest
            binary_name: gitautoflow-linux-x64
            python_arch: x64
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            binary_name: gitautoflow-linux-arm64
            python_arch: arm64

          # macOS builds
          - os: macos
            arch: x64
            runner: macos-13  # Intel Mac
            binary_name: gitautoflow-macos-x64
            python_arch: x64
          - os: macos
            arch: arm64
            runner: macos-14  # M1/M2 Mac
            binary_name: gitautoflow-macos-arm64
            python_arch: arm64

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up QEMU for ARM64 (Linux ARM64 only)
        if: matrix.os == 'linux' && matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.python_arch }}

      - name: 🔧 Install patchelf (Linux x64 only)
        if: matrix.os == 'linux' && matrix.arch == 'x64'
        run: sudo apt-get update && sudo apt-get install -y patchelf

      - name: 📦 Install UV (non-ARM64 builds)
        if: matrix.os != 'linux' || matrix.arch != 'arm64'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: 🔧 Install dependencies (non-ARM64 builds)
        if: matrix.os != 'linux' || matrix.arch != 'arm64'
        run: |
          uv sync
          uv add nuitka
          uv add ordered-set  # Required for Nuitka

      - name: 📝 Create launcher file
        run: |
          cat > launcher.py << 'EOF'
          #!/usr/bin/env python3
          import sys
          import os
          sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))
          from gitautoflow.cli.main import main
          if __name__ == "__main__":
              main()
          EOF

      - name: 🏗️ Build binary with Nuitka (fast build that works!)
        run: |
          if [[ "${{ matrix.arch }}" == "arm64" && "${{ matrix.os }}" == "linux" ]]; then
            # ARM64 Linux build with Docker
            docker run --rm --platform linux/arm64 \
              -v $PWD:/workspace -w /workspace \
              python:3.11-slim-bullseye bash -c "
                apt-get update && apt-get install -y curl build-essential patchelf &&
                curl -LsSf https://astral.sh/uv/install.sh | sh &&
                export PATH=\"/root/.local/bin:\$PATH\" &&
                uv sync &&
                uv add nuitka ordered-set &&
                uv run python -m nuitka --assume-yes-for-downloads --jobs=4 --include-package-data=gitautoflow --include-package=lib --output-dir=dist/ launcher.py
              "
          else
            # Standard build for x64 and macOS
            uv run python -m nuitka \
              --assume-yes-for-downloads \
              --jobs=4 \
              --include-package-data=gitautoflow \
              --include-package=lib \
              --output-dir=dist/ \
              launcher.py
          fi

      - name: 🏷️ Rename binary to target name
        run: |
          mv dist/launcher.bin dist/${{ matrix.binary_name }}

      - name: ✅ Test binary
        run: |
          chmod +x dist/${{ matrix.binary_name }}
          ./dist/${{ matrix.binary_name }} --help

      - name: 📊 Show binary info
        run: |
          ls -la dist/
          file dist/${{ matrix.binary_name }} || true

      - name: 📤 Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/${{ matrix.binary_name }}
          asset_name: ${{ matrix.binary_name }}
          asset_content_type: application/octet-stream

  create-checksums:
    name: 📋 Generate checksums
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4

      - name: 📋 Generate SHA256 checksums
        run: |
          echo "# SHA256 Checksums" > checksums.txt
          echo "Generated on: $(date)" >> checksums.txt
          echo "" >> checksums.txt
          for file in gitautoflow-*; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
            fi
          done || true
          cat checksums.txt

      - name: 📤 Upload checksums to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain