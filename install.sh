#!/bin/bash
# Git Auto-Flow - Installation des alias et configuration

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
INSTALL_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo -e "${BLUE}üöÄ Git Auto-Flow - Installation Globale${NC}"
echo -e "${BLUE}=================================${NC}"
echo -e "üìç R√©pertoire d'installation: ${INSTALL_DIR}"
echo ""

# 1. V√©rification des pr√©requis
echo -e "${BLUE}üîç V√©rification des pr√©requis...${NC}"

# Python 3
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python3 non trouv√©${NC}"
    echo -e "${YELLOW}üí° Installez Python3 d'abord:${NC}"
    echo -e "   macOS: brew install python3"
    echo -e "   Ubuntu: sudo apt install python3 python3-pip"
    exit 1
fi
echo -e "${GREEN}‚úÖ Python3 trouv√©: $(python3 --version)${NC}"

# pip3
if ! command -v pip3 &> /dev/null; then
    echo -e "${RED}‚ùå pip3 non trouv√©${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ pip3 trouv√©${NC}"

# Git
if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Git non trouv√©${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Git trouv√©: $(git --version)${NC}"

# GitHub CLI
if ! command -v gh &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  GitHub CLI (gh) non trouv√©${NC}"
    echo -e "${YELLOW}üí° Installation recommand√©e:${NC}"
    echo -e "   macOS: brew install gh"
    echo -e "   Ubuntu: sudo apt install gh"
    echo -e "   Ou: https://github.com/cli/cli/releases"
    echo ""
    read -p "Continuer sans GitHub CLI? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ GitHub CLI trouv√©: $(gh --version | head -n1)${NC}"
fi

echo ""

# 2. Installation des d√©pendances Python
echo -e "${BLUE}üì¶ Installation des d√©pendances Python...${NC}"

# Fonction d'installation intelligente
install_python_deps() {
    local packages="google-generativeai python-dotenv groq"
    
    # M√©thode 1: pipx (recommand√©e pour les outils)
    if command -v pipx &> /dev/null; then
        echo -e "${GREEN}üîß Utilisation de pipx (m√©thode recommand√©e)...${NC}"
        for package in $packages; do
            pipx install $package --quiet 2>/dev/null || true
        done
        return 0
    fi
    
    # M√©thode 2: pip --user (s√ªre)
    if pip3 install --user $packages --quiet 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Installation --user r√©ussie${NC}"
        return 0
    fi
    
    # M√©thode 3: break-system-packages (derniers recours)
    if pip3 install --break-system-packages $packages --quiet 2>/dev/null; then
        echo -e "${YELLOW}‚ö° Installation avec --break-system-packages${NC}"
        return 0
    fi
    
    # M√©thode 4: requirements.txt si pr√©sent
    if [ -f "${INSTALL_DIR}/requirements.txt" ]; then
        if pip3 install --user -r "${INSTALL_DIR}/requirements.txt" --quiet 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Installation via requirements.txt r√©ussie${NC}"
            return 0
        fi
    fi
    
    echo -e "${RED}‚ùå Impossible d'installer les d√©pendances Python${NC}"
    echo -e "${YELLOW}üí° Installation manuelle:${NC}"
    echo -e "   brew install pipx && pipx install google-generativeai python-dotenv groq"
    return 1
}

# Appel de la fonction
if install_python_deps; then
    echo -e "${GREEN}‚úÖ D√©pendances Python configur√©es${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Continuez avec installation manuelle si n√©cessaire${NC}"
fi

echo ""

# 3. Installation gitleaks pour s√©curit√©
echo -e "${BLUE}üì¶ Installation gitleaks (s√©curit√©)...${NC}"
if command -v brew &> /dev/null; then
    if ! command -v gitleaks &> /dev/null; then
        brew install gitleaks --quiet 2>/dev/null && echo -e "${GREEN}‚úÖ gitleaks install√© via brew${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  Installation gitleaks via brew √©chou√©e${NC}"
    else
        echo -e "${GREEN}‚úÖ gitleaks d√©j√† install√©${NC}"
    fi
elif command -v curl &> /dev/null; then
    if [[ ! -f "${INSTALL_DIR}/bin/gitleaks" ]]; then
        echo "üì• T√©l√©chargement gitleaks depuis GitHub..."
        GITLEAKS_VERSION="8.18.4"
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        if [[ "$ARCH" == "x86_64" ]]; then ARCH="amd64"; fi
        if [[ "$ARCH" == "arm64" ]] && [[ "$OS" == "darwin" ]]; then ARCH="arm64"; fi
        
        curl -L "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_${OS}_${ARCH}.tar.gz" -o /tmp/gitleaks.tar.gz 2>/dev/null && {
            tar -xzf /tmp/gitleaks.tar.gz -C /tmp/ 2>/dev/null && {
                mkdir -p "${INSTALL_DIR}/bin"
                mv /tmp/gitleaks "${INSTALL_DIR}/bin/"
                chmod +x "${INSTALL_DIR}/bin/gitleaks"
                rm /tmp/gitleaks.tar.gz
                echo -e "${GREEN}‚úÖ gitleaks install√© dans ${INSTALL_DIR}/bin/${NC}"
            } || echo -e "${YELLOW}‚ö†Ô∏è  Extraction gitleaks √©chou√©e${NC}"
        } || echo -e "${YELLOW}‚ö†Ô∏è  T√©l√©chargement gitleaks √©chou√©${NC}"
    else
        echo -e "${GREEN}‚úÖ gitleaks d√©j√† install√© dans ${INSTALL_DIR}/bin/${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  curl et brew non trouv√©s - gitleaks non install√©${NC}"
fi
echo ""

# 4. Configuration des alias Git
echo -e "${BLUE}‚öôÔ∏è  Configuration des alias Git...${NC}"

# Sauvegarde de la configuration actuelle
if [ -f ~/.gitconfig ]; then
    cp ~/.gitconfig ~/.gitconfig.backup.$(date +%Y%m%d_%H%M%S)
    echo -e "${GREEN}‚úÖ Sauvegarde de ~/.gitconfig cr√©√©e${NC}"
fi

# Configuration s√©curis√©e des alias via git config
echo -e "${BLUE}üîß Configuration des alias Git Auto-Flow...${NC}"

# WORKFLOW
git config --global alias.feature-start "!f() { echo 'üöÄ Feature: '\$1; echo 'üßπ Nettoyage des branches merg√©es...'; git fetch --prune origin 2>/dev/null || true; git branch --merged main 2>/dev/null | grep 'feature/' | xargs -n 1 git branch -d 2>/dev/null || true; git branch --merged develop 2>/dev/null | grep 'feature/' | xargs -n 1 git branch -d 2>/dev/null || true; git branch -r --merged main 2>/dev/null | grep 'origin/feature/' | sed 's/origin\\///' | xargs -n 1 git push origin --delete 2>/dev/null || true; git branch -r --merged develop 2>/dev/null | grep 'origin/feature/' | sed 's/origin\\///' | xargs -n 1 git push origin --delete 2>/dev/null || true; git checkout develop 2>/dev/null || git checkout -b develop; git pull origin develop 2>/dev/null || true; git checkout -b feature/\$1 && git push -u origin feature/\$1 2>/dev/null || true; echo '‚úÖ Feature cr√©√©e: feature/'\$1; }; f"
git config --global alias.commit-auto "!cd \$(git rev-parse --show-toplevel) && python3 ${INSTALL_DIR}/src/git-commit-auto.py"
git config --global alias.ca "!git commit-auto"
git config --global alias.pr "!cd \$(git rev-parse --show-toplevel) && python3 ${INSTALL_DIR}/src/git-pr-auto.py"
git config --global alias.feature-finish "!f() { echo 'üîÑ Finalisation de la feature...'; git fetch origin develop && git rebase origin/develop && git push --force-with-lease origin \$(git branch --show-current) && echo '‚úÖ Feature pr√™te pour PR vers develop'; }; f"
git config --global alias.pr-create-auto "!cd \$(git rev-parse --show-toplevel) && python3 ${INSTALL_DIR}/src/git-pr-create-auto.py"
git config --global alias.deploy "!cd \$(git rev-parse --show-toplevel) && python3 ${INSTALL_DIR}/src/git-release-auto.py"
git config --global alias.cleanup-branches "!f() { echo 'üßπ Nettoyage des branches locales...'; git fetch --prune origin; git branch --merged develop | grep -v 'develop\\|main\\|master' | xargs -n 1 git branch -d 2>/dev/null || true; git branch --merged main | grep -v 'develop\\|main\\|master' | xargs -n 1 git branch -d 2>/dev/null || true; echo '‚úÖ Branches merg√©es supprim√©es'; }; f"

# PROJECT MANAGEMENT
git config --global alias.project-config "!cd \$(git rev-parse --show-toplevel 2>/dev/null || pwd) && python3 ${INSTALL_DIR}/src/git-project-config.py"
git config --global alias.pc "!git project-config"
git config --global alias.repo-create "!cd \$(git rev-parse --show-toplevel 2>/dev/null || pwd) && python3 ${INSTALL_DIR}/src/git-repo-create.py"
git config --global alias.create-tickets "!cd \$(git rev-parse --show-toplevel) && python3 ${INSTALL_DIR}/src/git-create-tickets.py"

echo -e "${GREEN}‚úÖ Alias Git Auto-Flow configur√©s proprement${NC}"

# 5. Installation semantic-release (conditionnelle)
if [ -f "package.json" ]; then
    if command -v npm &> /dev/null || command -v pnpm &> /dev/null || command -v yarn &> /dev/null; then
        echo ""
        echo -e "${BLUE}üì¶ Installation semantic-release (d√©tect√© package.json)...${NC}"
        
        if command -v pnpm &> /dev/null; then
            PACKAGE_MANAGER="pnpm"
        elif command -v yarn &> /dev/null; then
            PACKAGE_MANAGER="yarn"
        else
            PACKAGE_MANAGER="npm"
        fi
        
        echo -e "${YELLOW}üì¶ Utilisation de ${PACKAGE_MANAGER}...${NC}"
        
        if $PACKAGE_MANAGER install >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ D√©pendances Node.js install√©es${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Installation des d√©pendances Node.js √©chou√©e${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  package.json trouv√©, mais ni npm, pnpm ou yarn. Installation semantic-release ignor√©e.${NC}"
    fi
fi

# 6. Configuration interactive des cl√©s API  
echo ""
echo -e "${BLUE}üîë Configuration des cl√©s API...${NC}"

GLOBAL_ENV_FILE="$HOME/.env.gitautoflow"
if [ -f "$GLOBAL_ENV_FILE" ]; then
    echo -e "${GREEN}‚úÖ Configuration API trouv√©e: $GLOBAL_ENV_FILE${NC}"
else
    echo -e "${YELLOW}üí° Configurons vos cl√©s API (optionnel):${NC}"
    echo ""
    echo -e "${BLUE}ü§ñ Gemini API (Google AI Studio):${NC}"
    echo -e "   üîó ${YELLOW}https://makersuite.google.com/app/apikey${NC}"
    read -p "Entrez votre cl√© Gemini API (ou ENTER pour ignorer): " GEMINI_KEY
    echo ""
    echo -e "${BLUE}‚ö° Groq API (Fallback gratuit):${NC}"
    echo -e "   üîó ${YELLOW}https://console.groq.com/keys${NC}"
    read -p "Entrez votre cl√© Groq API (ou ENTER pour ignorer): " GROQ_KEY

    {
        echo "# Git Auto-Flow - Configuration des API"
        echo "# G√©n√©r√© automatiquement le $(date)"
        echo ""
        echo "GEMINI_API_KEY=${GEMINI_KEY}"
        echo "GROQ_API_KEY=${GROQ_KEY}"
    } > "$GLOBAL_ENV_FILE"

    echo -e "${GREEN}‚úÖ Cl√©s API configur√©es dans $GLOBAL_ENV_FILE${NC}"
    echo ""
fi

# 7. Instructions finales
echo ""
echo -e "${GREEN}üéâ Installation globale termin√©e!${NC}"

echo ""
echo -e "${YELLOW}Pour cr√©er un nouveau projet GitHub complet :${NC}"
echo -e "   ${GREEN}git repo-create mon-projet${NC}     # Projet priv√© avec workflow complet"
echo -e "   ${GREEN}git repo-create api --public${NC}   # Projet public"
echo -e "   ${GREEN}git pc${NC}                        # (Re)lancer la configuration"

echo ""
echo -e "${YELLOW}Dans un repo existant :${NC}"
echo -e "   ${GREEN}git feature-start ma-feature${NC}  # Nouvelle feature"
echo -e "   ${GREEN}git ca${NC}                       # Commit IA"
echo -e "   ${GREEN}git pr${NC}                       # PR automatique"

echo ""
echo -e "${BLUE}üìö Documentation compl√®te:${NC}"
echo -e "   ${YELLOW}${INSTALL_DIR}/README.md${NC}"

echo ""
echo -e "${GREEN}‚ú® Git Auto-Flow est pr√™t √† l'emploi!${NC}"