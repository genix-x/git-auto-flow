#!/usr/bin/env python3
"""
Biblioth√®que commune pour les appels √† l'API Gemini
"""

import os
import json
import google.generativeai as genai
from typing import Dict, List, Optional
from dotenv import load_dotenv
from prompt_templates import PromptTemplates


class GeminiClient:
    """Client r√©utilisable pour les appels √† l'API Gemini"""
    
    def __init__(self):
        """Initialise le client Gemini avec la cl√© API"""
        # Charge le fichier .env
        load_dotenv()
        
        # V√©rifie la cl√© API
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError(
                "‚ùå GEMINI_API_KEY non d√©finie\n"
                "üí° Solutions:\n"
                "   1. Ajouter GEMINI_API_KEY=ta_cle dans le fichier .env\n"
                "   2. Export GEMINI_API_KEY='ta_cle_ici'"
            )
        
        # Configure Gemini
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
    
    def analyze_for_commit(self, diff: str, files: str) -> Dict:
        """
        Analyse les changements Git pour g√©n√©rer un commit conventionnel
        
        Args:
            diff: Le git diff des fichiers stag√©s
            files: La liste des fichiers modifi√©s
            
        Returns:
            Dict contenant les donn√©es du commit (type, scope, description, body, etc.)
        """
        prompt = f"""
Analyse les changements Git suivants et g√©n√®re UNIQUEMENT un JSON valide.

FICHIERS MODIFI√âS:
{files}

DIFF√âRENCES:
{diff}

IMPORTANT: Tu DOIS r√©pondre EXCLUSIVEMENT avec ce format JSON exact, sans aucun texte avant ou apr√®s:

{{
    "type": "feat",
    "scope": "automation",
    "description": "add gemini AI powered commit automation",
    "body": "Add intelligent commit message generation using Google Gemini API\\n- Auto-analyze git diff and staged files\\n- Generate conventional commit messages\\n- Support for scopes, breaking changes, and issue linking\\n- Interactive confirmation before commit",
    "breaking": false,
    "issues": []
}}

Types possibles: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert

R√®gles strictes:
1. R√©ponse = JSON SEULEMENT
2. Pas de markdown, pas de texte explicatif
3. description en anglais, sans majuscule au d√©but
4. scope optionnel mais pertinent
5. body avec d√©tails si n√©cessaire (avec \\n pour newlines)

JSON SEULEMENT:
"""
        return self._make_request(prompt)
    
    def analyze_for_pr(self, diff: str, files: str, target_branch: str = "develop") -> Dict:
        """
        Analyse les changements Git pour g√©n√©rer une PR
        
        Args:
            diff: Le git diff complet de la branche
            files: La liste des fichiers modifi√©s
            target_branch: La branche cible (develop, main, etc.)
            
        Returns:
            Dict contenant les donn√©es de la PR (title, body, labels, etc.)
        """
        prompt = f"""
Analyse les changements Git pour cr√©er une Pull Request vers {target_branch}.

FICHIERS MODIFI√âS:
{files}

DIFF√âRENCES (premi√®re partie):
{diff[:2000]}...

R√âPONSE OBLIGATOIRE: JSON STRICT - AUCUN TEXTE EXPLICATIF

Format JSON obligatoire (exemple):
{{
    "title": "feat(automation): add gemini AI scripts for git automation",
    "body": "## Summary\\n\\nAdd intelligent automation scripts for Git commits and PR creation using Gemini AI.\\n\\n## Changes\\n\\n- Add git-cz-auto-v2.py for automatic commit message generation\\n- Add git-pr-auto.py for automatic PR creation\\n- Add shared lib with GeminiClient and GitUtils\\n- Add shell wrappers for easy execution\\n\\n## Test plan\\n\\n- [x] Scripts tested with real repositories\\n- [x] Error handling validated\\n- [x] API key configuration working\\n\\nü§ñ Generated with [Claude Code](https://claude.ai/code)",
    "labels": ["enhancement"],
    "draft": false
}}

R√àGLES CRITIQUES:
1. UNIQUEMENT JSON - PAS DE TEXTE AVANT/APR√àS
2. title: conventional commit format (type(scope): description)
3. body: markdown avec sections Summary, Changes, Test plan
4. labels: tableau de cha√Ænes pertinentes
5. draft: bool√©en

R√âPONSE = JSON SEULEMENT:
"""
        return self._make_request(prompt)
    
    def _make_request(self, prompt: str) -> Dict:
        """
        Effectue une requ√™te √† l'API Gemini et parse le JSON
        
        Args:
            prompt: Le prompt √† envoyer √† Gemini
            
        Returns:
            Dict pars√© depuis la r√©ponse JSON
        """
        try:
            response = self.model.generate_content(prompt)
            
            # Nettoie la r√©ponse pour extraire le JSON
            content = response.text.strip()
            if content.startswith('```json'):
                content = content[7:]
            if content.startswith('```'):
                content = content[3:]
            if content.endswith('```'):
                content = content[:-3]
            content = content.strip()
            
            return json.loads(content)
            
        except json.JSONDecodeError as e:
            raise ValueError(f"Erreur JSON: {e}\\nContenu analys√©: {content}")
        except Exception as e:
            raise RuntimeError(f"Erreur lors de l'analyse avec Gemini: {e}")
    
    def analyze_for_release(self, diff: str, files: str, commits: Optional[List[str]] = None) -> Dict:
        """
        Analyse les changements pour g√©n√©rer une PR de release develop -> main
        
        Args:
            diff: Le git diff complet develop -> main
            files: La liste des fichiers modifi√©s
            commits: Liste des messages de commits
            
        Returns:
            Dict contenant les donn√©es de la PR de release
        """
        prompt = PromptTemplates.get_release_prompt(files, commits, diff)
        
        try:
            response = self.model.generate_content(prompt)
            content = PromptTemplates.clean_json_response(response.text)
            return json.loads(content)
            
        except json.JSONDecodeError as e:
            raise ValueError(f"Erreur JSON: {e}\\nContenu analys√©: {content}")
        except Exception as e:
            raise RuntimeError(f"Erreur lors de l'analyse avec Gemini: {e}")